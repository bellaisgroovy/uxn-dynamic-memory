(
    name : Bellatrix Hodgson
    guid : 2770706h

    description:
    Dynamic memory allocation using pages and a bitmap.

    Uses a bitmap to represent if pages of memory are claimed or not. Allows
    user to claim a space by specifying the number of bytes they wish to store
    and calling malloc. Allows user to unclaim spaces by specifying where they 
    would like to free up space and the number of bytes they wish to unclaim.

    usage:
    no_bytes malloc -> claims and returns address claimed
    pointer no_bytes free -> frees bytes at pointer
)

|0000
( zero page, used for temporary storage )

|0100
    (
    Integration tests
    )

    ( "if malloc requests n bytes and there is enough contiguous memory
    to claim, returns the pointer to the start of this memory area" )
    enough-memory-claim nl

    ( "if malloc requests n bytes and there is not enough contiguous memory
    to claim, returns 0" )
    not-enough-memory-claim nl

    ( "if free takes a valid pointer {i.e. returned by a succesful malloc} and
    the corresponding size, the corresponding contiguous memory area
    will be deallocated" )
    valid-free-from-malloc nl

    ( "if free takes an invalid pointer {i.e. from a succesful malloc}, the
    behaviour is undefined and does not need to be verified.

    If free takes a valid pointer but incorrect size, the behaviour is
    undefined and does not need to be verified" )

    ( "allocation and deallocation should work correctly for any size between
    1 and PAGE_SZ*N_PAGES-1 bytes" )
    test-page-size-range print-bit nl
BRK

( definition of integration tests )

@enough-memory-claim
    #0010 malloc ( ptr )
    DUP2 print16 nl
    #0010 free
    JMP2r

@not-enough-memory-claim
    #ffff malloc ( ptr )
    print16 nl
    JMP2r

@valid-free-from-malloc
    #0050 malloc ( ptr )
    print-bitmap
    #0050 free ( -- )
    print-bitmap
    JMP2r

( tries to claim and free every integer of pages between 1 and PAGESZ*{N_PAGES-1} )
( returns 1 if it works and 0 if it doesn't )
@test-page-size-range
    ( loop in range PAGE_SZ*N_PAGES-1 )
    N_PAGES #0001 SUB2 PAGE_SZ MUL2 ( PAGESZ*{N_PAGES-1} )
    #0001 ( PAGESZ*N_PAGES-1, mem_sz )
    &loop
        ( if mem_z > PAGESZ*N_PAGES-1 then pass )
        LTH2k ,&pass JCN ( PAGESZ*N_PAGES-1, mem_sz )
        ( claim space of mem_sz )
        DUP2 malloc ( PAGESZ*N_PAGES-1, mem_sz, ptr )

        ( if returned 0 fail )
        DUP2 ( PAGESZ*N_PAGES-1, mem_sz, ptr, ptr )
        #0000 EQU2 ,&fail JCN ( PAGESZ*N_PAGES-1, mem_sz, ptr )

        ( free space at ptr returned by mem_sz )
        OVR2 ( PAGESZ*N_PAGES-1, mem_sz, ptr, mem_sz )
        free ( PAGESZ*N_PAGES-1, mem_sz )

        ( loop )
        INC2 ,&loop JMP
    &fail
        #010e DEO
        POP2 POP2 POP2
        #00 JMP2r
    &pass
        POP2 POP2
        #01 JMP2r




( definitions of malloc, free and functions used to implement them )

@malloc ( n_bytes -- <allocation in bytes> )
    ( if n_bytes is 0 return null )
    DUP2 #0000 EQU2 ,&return-null JCN ( n_bytes )

    ( get alloc_sz )
    #0001 SUB2 ( n_bytes-1 )
    PAGE_SZ DIV2 ( n_bytes-1/page_sz )
    #0001 ADD2 ( alloc_sz )

    ( loop in range alloc_sz )
    N_PAGES
    #0000 ( alloc_sz, N_PAGES, idx )
    &loop

        ( if loop ran alloc_sz times return null )
        EQU2k ,&return-null-loop JCN ( alloc_sz, N_PAGES, idx )

        ( if alloc sz is free then claim it )
        ROT2 (  N_PAGES, idx, alloc_sz )
        OVR2 OVR2 (  N_PAGES, idx, alloc_sz, idx, alloc_sz )
        alloc_sz_is_free_at_idx ,&claim JCN (  N_PAGES, idx, alloc_sz )

        ( else loop )
        ROT2 ( idx, alloc_sz, N_PAGES )
        ROT2 ( alloc_sz, N_PAGES, idx )
        INC2 ( alloc_sz, N_PAGES, idx+1 )
        ,&loop JMP

    &return-null-loop
        POP2
        POP2
    &return-null
        POP2 ( clear stack )
        #0000 ( return null )
        JMP2r

    &claim (  N_PAGES, idx, alloc_sz )
        ROT2 POP2 ( idx, alloc_sz )
        OVR2 (  idx, alloc_sz, idx )
        SWP2 (  idx, idx, alloc_sz )
        claim_alloc_sz_at_idx ( idx )
        PAGE_SZ MUL2 DMEM_START ADD2 ( idx*page_sz+dmem_start )
        JMP2r

( points to a byte in memory, and the number of bytes from there to claim )
( one bit in the bitmap represents a 16 byte page in memory )
@free ( ptr n_bytes )
    SWP2 #f000 SUB2 PAGE_SZ DIV2 ( n_bytes idx )
    SWP2 ( idx n_bytes )
    #0001 SUB2 PAGE_SZ DIV2 #0001 ADD2 ( bytes to pages; idx n_pages )
    ;free_alloc_sz_at_idx JMP2

@get_bit ( idx -- bit ) ( wait can i just do ;bitmap ADD2 LDA?? )
    ( get idx % 8 )
    DUP2 DUP2 ( idx, idx, idx )
    #03 SFT2 #30 SFT2 ( idx, idx, idx rounded to the nearest 8 )
    SUB2 ( idx, idx%8 )

    ( take away index of the bit from 7 )
    #0007 SWP2 SUB2 ( idx, bit_idx )
    SWP2 ( bit_idx, idx )

    ( if index is too big exit )
    #03 SFT2 ( bit_idx, byte_idx )
    N_PAGES #0001 SUB2 ( bit_idx, byte_idx, n_pages-1 )
    GTH2k ( bit_idx, byte_idx, n_pages-1, byte_idx>n_pages-1 )
    ,&invalid JCN POP2 ( bit_idx, byte_idx )

    ( get bitmap[byte_idx] )
    ;bitmap ADD2 LDA ( bit_idx, *bitmap[byte_idx] )

    ( get value of bit at idx finally )
    ( bit_idx, byte )
    ROT ( bit_idx_low, byte, bit_idx_high )
    POP ( bit_idx_low, byte )
    SWP ( byte, bit_idx_low )
    SFT ( byte>>bit_idx )
    #01 AND ( bit )
    JMP2r
    
    &invalid
        { 0016 "Outside 20 "of 20 "page 20 "range 0a } STH2r print-str
        BRK


@set_bit ( idx -- )
    ( byte_idx = idx >> 3 )
    DUP2 ( idx, idx )
    #03 SFT2 ( idx, byte_idx )

    ( bit_idx = 7 - {idx - {byte_idx<<3}} )
    DUP2 ( idx, byte_idx, byte_idx )
    #30 SFT ( idx, byte_idx, byte_idx>><<3 )
    ROT2 ( byte_idx, byte_idx>><<3, idx )
    ADD2 ( byte_idx, idx+byte_idx>><<3 )
    #0007 SWP2 ( byte_idx, 0070, idx+byte_idx>><<3 )
    SUB2 ( byte_idx, bit_idx )

    ( byte = bitmap[byte_idx] )
    SWP2 ( bit_idx, byte_idx )
    ;bitmap ( bit_idx, byte_idx, &bitmap )
    ADD2 ( bit_idx, &bitmap[byte_idx] )
    
    ( bitmap[byte_idx] = byte | mask_set{bit_idx} )
    DUP2 ROT2 SWP2 (  &bitmap[byte_idx], bit_idx, &bitmap[byte_idx] )
    LDA (  &bitmap[byte_idx], bit_idx, *bitmap[byte_idx] )
    ROT ROT ( &bitmap[byte_idx], *bitmap[byte_idx], bit_idx )
    mask_set ( &bitmap[byte_idx], *bitmap[byte_idx], mask )
    ORA ( &bitmap[byte_idx], byteMasked )
    ROT ROT ( byteMasked, &bitmap[byte_idx] )
    STA ( -- )
    JMP2r

@mask_set ( idx16 ) ( returns mask with bit idx spaces left as 1 and the rest 0 )
    SWP POP ( makes idx byte instead of short ) ( idx8 ) ( is this def right? )
    #40 SFT ( moves low nibble of idx to high nibble ) ( idx8<<4 )
    #01 SWP SFT ( moves 1 in 0000 0001 left by value of idx ) ( 1<<idx8<<4 )
    JMP2r

@clear_bit ( idx -- )
    ( get idx % 8 )
    DUP2 DUP2 ( idx, idx, idx )
    #03 SFT2 #30 SFT2 ( idx, idx, idx rounded to the nearest 8 )
    SUB2 ( idx, idx%8 )

    ( take away index of the bit from 7 )
    #0007 SWP2 SUB2 ( idx, bit_idx )

    ( get mask )
    mask_clear ( idx, mask )
    ROT ROT ( mask, idx )

    ( get byte )
    #03 SFT2 ( mask, byte_idx )
    ;bitmap ADD2 ( mask, &bitmap[byte_idx] )
    LDAk ( mask, &bitmap[byte_idx], byte )
    ROT ROT ( mask, byte, &bitmap[byte_idx] )
    SWP2 ( &bitmap[byte_idx], mask, byte )

    ( apply mask )
    AND (&bitmap[byte_idx], mask&byte )

    ( store result )
    ROT ROT ( mask&byte, &bitmap[byte_idx] )
    STA ( -- )

    JMP2r

@mask_clear ( bit_idx -- 0xFF ^ {1 << bit_idx} )
    ( shift 1 to the left by bit_idx )
    SWP POP ( make bit_idx a byte )
    #01 SWP ( 01, bit_idx )
    #40 SFT ( move content of bit_idx to left nibble ) ( 01, bit_idx00 )
    SFT ( 1 << bit_idx )

    ( flip all the bits )
    #ff
    EOR
    
    JMP2r

( allocation size is in pages )
@alloc_sz_is_free_at_idx ( idx alloc_sz -- 00 or 01 )

    ( if out of range return 0 )
    ADD2k N_PAGES #0001 SUB2 ( idx, alloc_sz, idx+alloc_sz, N_PAGES-1 )
    GTH2 ( idx, alloc_sz, result ) 
    ,&out-of-range JCN ( idx, alloc_sz )

    ( if any bits in the alloc range are taken return 0 )
    #0000 ( idx, alloc_sz, counter )
    &loop
        EQU2k ,&free JCN ( if alloc_sz < counter finish loop  )

        ( if bit at idx+counter is allocated return 0 )
        ROT2 ( alloc_sz, counter, idx )
        ADD2k (alloc_sz, counter, idx, counter+idx )
        get_bit #01 EQU (alloc_sz, counter, idx, bit==1 )
        ,&not-free JCN ( alloc_sz, counter, idx )

        ( prepare for next iteration )
        ROT2 ( counter, idx, alloc_sz )
        ROT2 ( idx, alloc_sz, counter )
        INC2
        ,&loop JMP

    &out-of-range
        POP2 POP2 ( clear stack )
        #00 JMP2r ( return 0 )

    &not-free
        POP2 POP2 POP2
        #00 JMP2r

    &free
        POP2 POP2 POP2 ( clear stack )
        #01 JMP2r

    

@claim_alloc_sz_at_idx ( idx alloc_sz )
    #0000 ( idx, alloc_sz, counter )
    &loop
        ( if alloc_sz is less than counter end )
        EQU2k ,&end JCN ( idx, alloc_sz, counter )
        ROT2 ( alloc_sz, counter, idx )

        ( claim bit at bitmap[idx+counter] )
        ADD2k ( alloc_sz, counter, idx, counter+idx )
        set_bit ( alloc_sz, counter, idx )
        ROT2 ( counter, idx, alloc_sz )
        ROT2 ( idx, alloc_sz, counter )

        ( increment counter and loop )
        INC2
        ,&loop JMP
    &end
        POP2 POP2 POP2 ( clears stack )
        JMP2r

@free_alloc_sz_at_idx ( idx alloc_sz ) 
#0000 ( idx, alloc_sz, counter )
    &loop
        ( if alloc_sz is less than counter end )
        EQU2k ,&end JCN ( idx, alloc_sz, counter )
        ROT2 ( alloc_sz, counter, idx )

        ( free bit at bitmap[idx+counter] )
        ADD2k ( alloc_sz, counter, idx, counter+idx )
        clear_bit ( alloc_sz, counter, idx )
        ROT2 ( counter, idx, alloc_sz )
        ROT2 ( idx, alloc_sz, counter )

        ( increment counter and loop )
        INC2
        ,&loop JMP
    &end
        POP2 POP2 POP2 ( clears stack )
        JMP2r

( ==================================================== )
( Functions for printing )
@todo { 0005 "TODO 0a } STH2r print-str JMP2r

@print-bit #30 ADD #18 DEO JMP2r
@nl #0a18 DEO JMP2r ( print new line )
@ws #2018 DEO JMP2r ( print white space )

@print8 ( b -: )
    ( DUP ) ( b b )
    DUP ( b b b )
    lonib ( b b ln )
    h2a ( b b lna )
    SWP ( b lna b )
    hinib ( b lna hn )
    h2a ( b lna hna )
    #18 DEO #18 DEO ( POP )
    JMP2r

@print16 ( a* -: )
    SWP
    print8
    print8
    JMP2r

@lonib ( a -: b )
    #0f AND
    JMP2r

@hinib ( a -: b )
    #04 SFT
    JMP2r

@h2a ( a -: b )
    DUP ( a a )
    #0a LTH ( a c1 )
    DUP ( a c1 c1 )
    #01 SWP SUB ( a c1 1-c1 )
    #57 MUL ( a c1 [1-c1]*57 )
    SWP ( a [1-c1]*57 c1 )
    #30 MUL ( a [1-c1]*57 c1*30 )
    ADD 
    ADD ( a+[1-c1]*57+c1*30 )
    JMP2r

( To print a 1-byte unsigned integer 
as a decimal number of 3 digits )
( a -: )
@print8-dec
    ( h = x/100 )
    DUP ( x x ) 
    DUP #64  LTH ,&d2 JCN 
    #64 DIV ( x h ) DUP #30 ADD #18 DEO ( x h )
    ( d = x - 100*h )
    #64 MUL SUB ( d )
    ( t = d / 10 )
    DUP ( d d )
    &d2
    DUP #0a  LTH ,&d3 JCN
    #0a DIV ( d t ) DUP #30 ADD #18 DEO ( d t )
    ( e = d - 10*t )
    #0a MUL SUB ( e ) 
    DUP ( e e )
    &d3
    #30 ADD #18 DEO
    POP
JMP2r
( To print a 2-byte unsigned integer 
as a decimal number of 5 digits )
( x:16 -> -- )
( x* -: )
@print16-dec
    DUP2 ( x:16 x:16 )
    DUP2 #2710 LTH2 ,&d2 JCN
    ( T = x/10000 )
    #2710 DIV2 ( x:16 T:16 ) DUP #30 ADD #18 DEO
    ( Dt = x - 10000*T )
    #2710 MUL2 SUB2 ( Dt )
    DUP2 ( Dt Dt )
    &d2
    DUP2 #03e8  LTH2 ,&d3 JCN
    ( D = Dt / 1000 )
    #03e8 DIV2 ( Dt D ) DUP #30 ADD #18 DEO
    ( ht = Dt-D*1000 )
    #03e8 MUL2 SUB2  ( ht )
    DUP2 ( ht ht )
    &d3
    DUP2 #0064  LTH2 ,&d4 JCN
    ( h = ht /100 )
    #0064 DIV2 ( ht h ) DUP #30 ADD #18 DEO
    ( tt = ht - h*100 )
    #0064 MUL2 SUB2 ( tt )
    DUP2 ( tt tt )
    &d4
    ( t = tt / 10 )
    #000a DIV2 ( tt t ) DUP #30 ADD #18 DEO
    ( e = tt - 10*t )
    #000a MUL2 SUB2 ( e ) #30 ADD #18 DEO POP
JMP2r

( To print a string )
( The string starts with a 2-byte lenght field )
@print-str ( a* -: )
    LDA2k ( ;str size )
    SWP2 #0002 ADD2 SWP2 ( ;str+2 size )
    DUP2 ( ;str+2 size size )
    ( So we test if that is 0 and if not we keep going )
    &loop
    #0000 EQU2 ,&exit JCN ( ;str+2 size )
    SWP2 ( size ;str+2 )
    LDAk #18 DEO ( size ;str+2 )
    INC2 SWP2 #0001 SUB2 DUP2 ( ;str+3 size-1 size-1 )
    ,&loop JMP
    &exit
    POP2 POP2 POP2
JMP2r

@print-bitmap
    N_PAGES #0001 SUB2 ( n_pages )
    #0000 ( n_pages, page_idx )
    &loop
        ( if page_idx == n_pages stop )
        EQU2k ,&done JCN ( n_pages, page_idx )
        
        ( print page )
        DUP2 get_bit print-bit ( n_pages, page_idx )

        INC2 ( n_pages, page_idx+1 )
        ,&loop JMP
    &done
        POP2 POP2
        nl
        JMP2r

( example strings )
@invalid-str 000f "Invalid 20 "access:
@outside-str 0016 "Outside 20 "of 20 "page 20 "range:

( END of functions for printing and strings )
( ==================================================== )

@PAGE_SZ ( -: a* ) #0010 JMP2r ( We allocate 16 bytes per page )
@N_PAGES ( -: a* ) #0100 JMP2r ( We have a total of 256 pages, so we can allocate at most 4kB )
@DMEM_START ( -: a* ) #f000 JMP2r ( Start at 60*1024 )

( N_PAGES bits, packed in bytes mean N_PAGES/8 entries, so with the above, the bitmap will take 64 bytes )
( 0 means free )
@bitmap $40

( The dynamic allocation happens below this )
|f000
@dmem

