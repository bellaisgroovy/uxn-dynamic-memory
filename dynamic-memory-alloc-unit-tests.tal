( Dynamic memory allocation using pages and a bitmap )
( Unit tests for each function except `malloc` and `free` )

( This code will not assemble unless you've added all functions to be tested )

|0000
( zero page temporary storage )
@idx $2 @jj $2
@n_pages $2
@byte_idx $2
@bit_idx $2
@byte $1

|0100
    test-mask_clear
    test-mask_set
    test-get_bit
    test-clear_bit 
    test-set_bit 
    test-alloc_sz_is_free_at_idx
    test-claim_alloc_sz_at_idx
    test-free_alloc_sz_at_idx
BRK

( All unit tests )

@test-mask_clear ( -- )
    { 001d "Test 20 "for 20 "mask_clear(bit_idx) 0a } STH2r print-str
    #0000 mask_clear ( 1111 1110 ) #fe EQU #30 ADD #18 DEO #0a18 DEO
    #0001 mask_clear ( 1111 1101 ) #fd EQU #30 ADD #18 DEO #0a18 DEO
    #0002 mask_clear ( 1111 1011 ) #fb EQU #30 ADD #18 DEO #0a18 DEO
    #0003 mask_clear ( 1111 0111 ) #f7 EQU #30 ADD #18 DEO #0a18 DEO
    #0004 mask_clear ( 1110 1111 ) #ef EQU #30 ADD #18 DEO #0a18 DEO
    #0005 mask_clear ( 1101 1111 ) #df EQU #30 ADD #18 DEO #0a18 DEO
    #0006 mask_clear ( 1011 1111 ) #bf EQU #30 ADD #18 DEO #0a18 DEO
    #0007 mask_clear ( 0111 1111 ) #7f EQU #30 ADD #18 DEO #0a18 DEO
JMP2r

@test-mask_set ( -- )
    { 001b "Test 20 "for 20 "mask_set(bit_idx) 0a } STH2r print-str
    #0000 mask_set ( 0000 0001 ) #01 EQU #30 ADD #18 DEO #0a18 DEO
    #0001 mask_set ( 0000 0010 ) #02 EQU #30 ADD #18 DEO #0a18 DEO
    #0002 mask_set ( 0000 0100 ) #04 EQU #30 ADD #18 DEO #0a18 DEO
    #0003 mask_set ( 1111 0111 ) #08 EQU #30 ADD #18 DEO #0a18 DEO
    #0004 mask_set ( 1110 1111 ) #10 EQU #30 ADD #18 DEO #0a18 DEO
    #0005 mask_set ( 1101 1111 ) #20 EQU #30 ADD #18 DEO #0a18 DEO
    #0006 mask_set ( 1011 1111 ) #40 EQU #30 ADD #18 DEO #0a18 DEO
    #0007 mask_set ( 0111 1111 ) #80 EQU #30 ADD #18 DEO #0a18 DEO
JMP2r

( 1/ test with 8 bytes in different locations with a different bit set )
( 2/ test with 8 bytes in different locations with multiple bits set )
( In both cases, read bits that are set and not set )
@test-get_bit ( -- )
    { 0016 "Test 20 "for 20 "get_bit(idx) 0a } STH2r print-str
    ( Set some bits in some bytes in the bitmap )
    #01 ;bitmap #0001 ADD2 STA ( positions: 16=1,15=0 )
    #80 ;bitmap #0003 ADD2 STA ( positions: 24=1,25=0 )
    #02 ;bitmap #0004 ADD2 STA ( positions: 39=1,40=0 )
    #40 ;bitmap #0008 ADD2 STA ( positions: 66=1,67=0 )
    #04 ;bitmap #000c ADD2 STA ( positions: 101=1,102=0 )
    #20 ;bitmap #000d ADD2 STA ( position: 114=1,115=9 )
    ( Check if getting the bits from the bitmap works )
    #000f get_bit print-bit ws #000e get_bit print-bit nl
    #0018 get_bit print-bit ws #0019 get_bit print-bit nl
    #0026 get_bit print-bit ws #0027 get_bit print-bit nl
    #0041 get_bit print-bit ws #0042 get_bit print-bit nl
    #0065 get_bit print-bit ws #0066 get_bit print-bit nl
    #006a get_bit print-bit ws #006b get_bit print-bit nl
    ( Set some more bits in some bytes in the bitmap )
    #03 ;bitmap #0001 ADD2 STA ( positions: 16=1,15=0 )
    #c0 ;bitmap #0003 ADD2 STA ( positions: 24=1,25=0 )
    #06 ;bitmap #0004 ADD2 STA ( positions: 39=1,40=0 )
    #60 ;bitmap #0008 ADD2 STA ( positions: 66=1,67=0 )
    #0c ;bitmap #000c ADD2 STA ( positions: 101=1,102=0 )
    #30 ;bitmap #000d ADD2 STA ( position: 114=1,115=9 )
    ( Check again if getting the bits from the bitmap works )
    #000f get_bit print-bit ws #000e get_bit print-bit nl
    #0018 get_bit print-bit ws #0019 get_bit print-bit nl
    #0026 get_bit print-bit ws #0027 get_bit print-bit nl
    #0041 get_bit print-bit ws #0042 get_bit print-bit nl
    #0065 get_bit print-bit ws #0066 get_bit print-bit nl
    #006a get_bit print-bit ws #006b get_bit print-bit nl
JMP2r

@test-clear_bit ( -- )
    { 0018 "Test 20 "for 20 "clear_bit(idx) 0a } STH2r print-str
    ( Clear some bits )
    #000f clear_bit #000e clear_bit
    #0018 clear_bit #0019 clear_bit
    #0026 clear_bit #0027 clear_bit
    #0041 clear_bit #0042 clear_bit
    #0065 clear_bit #0066 clear_bit
    #006a clear_bit #006b clear_bit
    ( Check if the bits were cleared )
    #000f get_bit print-bit ws #000e get_bit print-bit nl
    #0018 get_bit print-bit ws #0019 get_bit print-bit nl
    #0026 get_bit print-bit ws #0027 get_bit print-bit nl
    #0041 get_bit print-bit ws #0042 get_bit print-bit nl
    #0065 get_bit print-bit ws #0066 get_bit print-bit nl
    #006a get_bit print-bit ws #006b get_bit print-bit nl
JMP2r

@test-set_bit ( -- )
    { 0016 "Test 20 "for 20 "set_bit(idx) 0a } STH2r print-str
    ( Set some bits )
    #000f set_bit #000e set_bit
    #0018 set_bit #0019 set_bit
    #0026 set_bit #0027 set_bit
    #0041 set_bit #0042 set_bit
    #0065 set_bit #0066 set_bit
    #006a set_bit #006b set_bit
    ( Check if the bits were set )
    #000f get_bit print-bit ws #000e get_bit print-bit nl
    #0018 get_bit print-bit ws #0019 get_bit print-bit nl
    #0026 get_bit print-bit ws #0027 get_bit print-bit nl
    #0041 get_bit print-bit ws #0042 get_bit print-bit nl
    #0065 get_bit print-bit ws #0066 get_bit print-bit nl
    #006a get_bit print-bit ws #006b get_bit print-bit nl
JMP2r

@test-alloc_sz_is_free_at_idx ( -- )
    { 002f "Test 20 "for 20 "alloc_sz_is_free_at_idx(idx,alloc_sz) 0a } STH2r print-str 
    ( All 0: none free )
    { 0006 "part1 0a } STH2r print-str
    #000f #0001 alloc_sz_is_free_at_idx  print-bit nl
    #000f #0002 alloc_sz_is_free_at_idx  print-bit nl
    #000f #0004 alloc_sz_is_free_at_idx  print-bit nl
    #000f #0008 alloc_sz_is_free_at_idx  print-bit nl
    #000f #0010 alloc_sz_is_free_at_idx  print-bit nl
     { 0006 "part2 0a } STH2r print-str 
    ( Last is 0 because 24 is set )
    #0010 #0001 alloc_sz_is_free_at_idx  print-bit nl
    #0010 #0002 alloc_sz_is_free_at_idx  print-bit nl
    #0010 #0004 alloc_sz_is_free_at_idx  print-bit nl
    #0010 #0008 alloc_sz_is_free_at_idx  print-bit nl
    #0010 #0010 alloc_sz_is_free_at_idx  print-bit nl
    { 0006 "part3 0a } STH2r print-str 
    ( 11100 because 24 is set )
    #0011 #0001 alloc_sz_is_free_at_idx  print-bit nl
    #0011 #0002 alloc_sz_is_free_at_idx  print-bit nl
    #0011 #0004 alloc_sz_is_free_at_idx  print-bit nl
    #0011 #0008 alloc_sz_is_free_at_idx  print-bit nl
    #0011 #0010 alloc_sz_is_free_at_idx  print-bit nl
    { 0006 "part4 0a } STH2r print-str 
    ( All one: all free )
    #006c #0001 alloc_sz_is_free_at_idx  print-bit nl
    #006c #0002 alloc_sz_is_free_at_idx  print-bit nl
    #006c #0004 alloc_sz_is_free_at_idx  print-bit nl
    #006c #0008 alloc_sz_is_free_at_idx  print-bit nl
    #006c #0010 alloc_sz_is_free_at_idx print-bit nl
JMP2r

@test-claim_alloc_sz_at_idx ( -- )
    { 002d "Test 20 "for 20 "claim_alloc_sz_at_idx(idx,alloc_sz) 0a } STH2r print-str
    ( Claim alloc of 1,2,3,4,5 pages starting at 0 )
    ;bitmap LDA2 STH2 ( stash first 2 bytes )
    { 0006 "part1 0a } STH2r print-str
    #0000 ;bitmap STA2 ( clear the bitmap's first 2 bytes ) 
    #0000 #0001 claim_alloc_sz_at_idx ( 1000 000 )
    ;bitmap LDA DUP print8 ws #80 EQU print-bit nl
    #0001 #0002 claim_alloc_sz_at_idx ( 1110 0000, is 1100 0000 )
    ;bitmap LDA DUP print8 ws #e0 EQU print-bit nl 
    #0003 #0003 claim_alloc_sz_at_idx ( 1111 1100, is 1101 1100 )
    ;bitmap LDA DUP print8 ws #fc EQU print-bit nl 
    #0006 #0004 claim_alloc_sz_at_idx ( 1111 1111 1100 0000 , is 1101 1111 1000 0011 )
    ;bitmap LDA DUP print8 ws
    ;bitmap INC LDA DUP print8 ws #ffc0 EQU2 print-bit nl 
    #000a #0005 claim_alloc_sz_at_idx ( 1111 1111 1100 0000 , is 1101 1111 1000 0011 )
    ;bitmap LDA DUP print8 ws
    ;bitmap INC LDA DUP print8 ws #fffe EQU2 print-bit nl 
    ( restore first two bytes to previous state )
    STH2r ;bitmap STA2
    { 0006 "part2 0a } STH2r print-str
    ( Claim alloc of 16 pages starting at 108 )
    #006c #0010 claim_alloc_sz_at_idx
    #007c #0010 alloc_sz_is_free_at_idx print-bit nl
    #006c #0010 alloc_sz_is_free_at_idx print-bit nl
JMP2r

@test-free_alloc_sz_at_idx ( -- ) 
    { 002c "Test 20 "for 20 "free_alloc_sz_at_idx(idx,alloc_sz) 0a } STH2r print-str
    ( Free 16 pages starting at 108 )
    #006c #0010 free_alloc_sz_at_idx
    #007c #0010 alloc_sz_is_free_at_idx print-bit nl
    #006c #0010 alloc_sz_is_free_at_idx print-bit nl
JMP2r

@test-free ( -- )
    { 000e "Test 20 "for 20 "free 0a } STH2r print-str

    ( claim first bit in memory )
    #0000 #0001 ( idx, alloc_sz ) claim_alloc_sz_at_idx ( TODO doesnt work claim the first 8 bits )
    ( print 0 if first bit is are claimed )
    #0000 #0001 alloc_sz_is_free_at_idx print-bit ws

    ( free first 16 bytes in memory to clear the first bit in the bitmap )
    DMEM_START #0001 free ( free the first bit )
    ( print 1 if first 8 bit is free )
    #0000 #0001 alloc_sz_is_free_at_idx print-bit nl


    ( claim bit 3 and 4 in memory ) ( remember count from 0 )
    #0003 #0002 ( idx, alloc_sz ) claim_alloc_sz_at_idx ( TODO doesnt work claim the first 8 bits )
    ( print 0 if bits are claimed )
    #0003 #0002 alloc_sz_is_free_at_idx print-bit ws

    ( free bytes 48 to 80 in memory to clear the first bit in the bitmap )
    DMEM_START #0030 ADD2 #0020 free ( free the first bit )
    ( print 1 if bits are free )
    #0003 #0002 alloc_sz_is_free_at_idx print-bit nl

    ( claim bit 12 to 19 in memory ) ( remember count from 0 )
    #000c #0008 ( idx, alloc_sz ) claim_alloc_sz_at_idx ( TODO doesnt work claim the first 8 bits )
    ( print 0 if bits are is are claimed )
    #000c #0008 alloc_sz_is_free_at_idx print-bit ws

    ( free bytes 48 to 80 in memory to clear the first bit in the bitmap )
    DMEM_START #00c0 ADD2 #0080 free ( free the first bit )
    ( print 1 if  bits are free )
    #000c #0008 alloc_sz_is_free_at_idx print-bit nl
JMP2r

@clear-bitmap
    ;bitmap ( &bitmap )
    N_PAGES ( &bitmap, n_pages )
    #0000 ( &bitmap, n_pages, page_idx )
    &loop
        ( if page_idx == n_pages stop )
        EQU2k ,&done JCN ( &bitmap, n_pages, page_idx )
        
        ( clear page )
        ROT2 ( n_pages, page_idx, &bitmap )
        ADD2k ( n_pages, page_idx, &bitmap, &bitmap[page_idx] )
        #00 ROT ROT ( n_pages, page_idx, &bitmap, 00,  &bitmap[page_idx] )
        STA ( n_pages, page_idx, &bitmap )

        ( increment counter and loop )
        ROT2 ROT2 ( &bitmap, n_pages, page_idx )
        INC2 ( &bitmap, n_pages, page_idx+1 )
        ,&loop JMP
    &done
        POP2 POP2 POP2
        JMP2r

@print-bitmap
    N_PAGES #0001 SUB2 ( n_pages )
    #0000 ( n_pages, page_idx )
    &loop
        ( if page_idx == n_pages stop )
        EQU2k ,&done JCN ( n_pages, page_idx )
        
        ( print page )
        DUP2 get_bit print-bit ( n_pages, page_idx )

        INC2 ( n_pages, page_idx+1 )
        ,&loop JMP
    &done
        POP2 POP2
        JMP2r

@test-malloc
    { 0010 "Test 20 "for 20 "malloc 0a } STH2r print-str
    ( clear bitmap )
    clear-bitmap 

    ( allocate 16 bytes )
    #0010 malloc ( addr )
    ( if bit 1 is claimed print 1 )
    #0000 #0001 alloc_sz_is_free_at_idx #00 EQU print-bit nl


    ( allocate 16 bytes )
    #0010 malloc ( addr )
    ( if bit 2 is claimed print 1 )
    #0001 #0001 alloc_sz_is_free_at_idx #00 EQU print-bit nl


    ( try to claim too big a space )  
    #0fe0 malloc 
    ( print 1 if failed )
    #0000 EQU2 print-bit nl

    print-bitmap

    JMP2r

( ==================================================== )

( All subroutines to be tested go here )

( ==================================================== )
( Functions for printing )
@todo { 0005 "TODO 0a } STH2r print-str JMP2r

@print-bit #30 ADD #18 DEO JMP2r
@nl #0a18 DEO JMP2r
@ws #2018 DEO JMP2r

@print8 ( b -: )
    ( DUP ) ( b b )
    DUP ( b b b )
    lonib ( b b ln )
    h2a ( b b lna )
    SWP ( b lna b )
    hinib ( b lna hn )
    h2a ( b lna hna )
    #18 DEO #18 DEO ( POP )
    JMP2r

@print16 ( a* -: )
    SWP
    print8
    print8
    JMP2r

@lonib ( a -: b )
    #0f AND
    JMP2r

@hinib ( a -: b )
    #04 SFT
    JMP2r

@h2a ( a -: b )
    DUP ( a a )
    #0a LTH ( a c1 )
    DUP ( a c1 c1 )
    #01 SWP SUB ( a c1 1-c1 )
    #57 MUL ( a c1 [1-c1]*57 )
    SWP ( a [1-c1]*57 c1 )
    #30 MUL ( a [1-c1]*57 c1*30 )
    ADD 
    ADD ( a+[1-c1]*57+c1*30 )
    JMP2r

( To print a 1-byte unsigned integer 
as a decimal number of 3 digits )
( a -: )
@print8-dec
    ( h = x/100 )
    DUP ( x x ) 
    DUP #64  LTH ,&d2 JCN 
    #64 DIV ( x h ) DUP #30 ADD #18 DEO ( x h )
    ( d = x - 100*h )
    #64 MUL SUB ( d )
    ( t = d / 10 )
    DUP ( d d )
    &d2
    DUP #0a  LTH ,&d3 JCN
    #0a DIV ( d t ) DUP #30 ADD #18 DEO ( d t )
    ( e = d - 10*t )
    #0a MUL SUB ( e ) 
    DUP ( e e )
    &d3
    #30 ADD #18 DEO
    POP
JMP2r
( To print a 2-byte unsigned integer 
as a decimal number of 5 digits )
( x:16 -> -- )
( x* -: )
@print16-dec
    DUP2 ( x:16 x:16 )
    DUP2 #2710 LTH2 ,&d2 JCN
    ( T = x/10000 )
    #2710 DIV2 ( x:16 T:16 ) DUP #30 ADD #18 DEO
    ( Dt = x - 10000*T )
    #2710 MUL2 SUB2 ( Dt )
    DUP2 ( Dt Dt )
    &d2
    DUP2 #03e8  LTH2 ,&d3 JCN
    ( D = Dt / 1000 )
    #03e8 DIV2 ( Dt D ) DUP #30 ADD #18 DEO
    ( ht = Dt-D*1000 )
    #03e8 MUL2 SUB2  ( ht )
    DUP2 ( ht ht )
    &d3
    DUP2 #0064  LTH2 ,&d4 JCN
    ( h = ht /100 )
    #0064 DIV2 ( ht h ) DUP #30 ADD #18 DEO
    ( tt = ht - h*100 )
    #0064 MUL2 SUB2 ( tt )
    DUP2 ( tt tt )
    &d4
    ( t = tt / 10 )
    #000a DIV2 ( tt t ) DUP #30 ADD #18 DEO
    ( e = tt - 10*t )
    #000a MUL2 SUB2 ( e ) #30 ADD #18 DEO POP
    JMP2r

( To print a string )
( The string starts with a 2-byte lenght field )
@print-str ( str* -: )
    LDA2k ( ;str size )
    SWP2 #0002 ADD2 SWP2 ( ;str+2 size )
    DUP2 ( ;str+2 size size )
    ( So we test if that is 0 and if not we keep going )
    &loop
    #0000 EQU2 ,&exit JCN ( ;str+2 size )
    SWP2 ( size ;str+2 )
    LDAk #18 DEO ( size ;str+2 )
    INC2 SWP2 #0001 SUB2 DUP2 ( ;str+3 size-1 size-1 )
    ,&loop JMP
    &exit
    POP2 POP2
    JMP2r

( example strings )
@invalid-str 000f "Invalid 20 "access:
@outside-str 0016 "Outside 20 "of 20 "page 20 "range:

( END of functions for printing and strings )
( ==================================================== )

@PAGE_SZ ( -: a* ) #0010 JMP2r ( We allocate 16 bytes per page )
@N_PAGES ( -: a* ) #0100 JMP2r ( We have a total of 256 pages, so we can allocate at most 4kB )
@DMEM_START ( -: a* ) #f000 JMP2r ( Start at 60*1024 )

 ( N_PAGES bits, packed in bytes mean N_PAGES/8 entries, so with the above, the bitmap will take 64 bytes )
 ( 0 means free )
@bitmap $40

( The allocation happens below this )
|f000
@dmem
